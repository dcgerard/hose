?hose::tensor_var_est
devtools::install()
?hose::tensor_var_est
?tensor_var_est
?hose::tensor_var_est
library(hose)
set.seed(247)
p <- c(10, 10, 10)
r <- c(5, 5, 5)
n <- length(p)
tau2 <- 1
fnorm_mean <- sqrt(prod(p)) * sqrt(tau2) ## so on same order as error
U_temp <- tensr::hosvd(array(stats::rnorm(prod(p)), dim = p))$U
U2_temp <- list()
S_temp <- tensr::holq(array(stats::rnorm(prod(p)), dim = r), print_diff = FALSE)$Z
for(index in 1:n)
{
U2_temp[[index]] <- U_temp[[index]][ , 1:r[index]]
}
## Our mean tensor.
Theta <- tensr::atrans(S_temp, U2_temp)
Theta <- Theta / tensr::fnorm(Theta) * fnorm_mean
hosvd_Theta <- hose::hosvd_full(Theta)
## Our data tensor
X <- Theta + array(stats::rnorm(n = prod(p), sd = sqrt(tau2)), dim = p)
## scree plots of the modes. Doesn't look low rank.
hosvd_x <- hosvd_full(X)
par(cex.lab = 0.7, cex.main = 0.7, cex.axis = 0.7, mgp = c(1.2, 0.4, 0),
mar = c(2.2, 2, 1.8, 0.5))
for(index in 1:n)
{
plot(hosvd_x$D[[index]], type = "h", ylim = c(0, max(hosvd_x$D[[index]])),
xlab = "Singular Value", ylab = "Value",
main = paste0("Scree Plot for Mode ", index))
}
sig_soft_out <- tensor_var_est(X, method = "soft")
sig_soft_out <- hose::tensor_var_est(X, method = "soft")
sig_soft_out <- hose:::tensor_var_est(X, method = "soft")
sig_soft_out <- hose:::tensor_var_est(X, sig_method = "soft")
devtools::document()
devtools::install()
sig_soft_out <- hose::tensor_var_est(X, sig_method = "soft")
library(hose)
set.seed(247)
p <- c(10, 10, 10)
r <- c(5, 5, 5)
n <- length(p)
tau2 <- 1
fnorm_mean <- sqrt(prod(p)) * sqrt(tau2) ## so on same order as error
U_temp <- tensr::hosvd(array(stats::rnorm(prod(p)), dim = p))$U
U2_temp <- list()
S_temp <- tensr::holq(array(stats::rnorm(prod(p)), dim = r), print_diff = FALSE)$Z
for(index in 1:n)
{
U2_temp[[index]] <- U_temp[[index]][ , 1:r[index]]
}
## Our mean tensor.
Theta <- tensr::atrans(S_temp, U2_temp)
Theta <- Theta / tensr::fnorm(Theta) * fnorm_mean
hosvd_Theta <- hose::hosvd_full(Theta)
## Our data tensor
X <- Theta + array(stats::rnorm(n = prod(p), sd = sqrt(tau2)), dim = p)
hosvd_x <- hosvd_full(X)
par(cex.lab = 0.7, cex.main = 0.7, cex.axis = 0.7, mgp = c(1.2, 0.4, 0),
mar = c(2.2, 2, 1.8, 0.5))
for(index in 1:n)
{
plot(hosvd_x$D[[index]], type = "h", ylim = c(0, max(hosvd_x$D[[index]])),
xlab = "Singular Value", ylab = "Value",
main = paste0("Scree Plot for Mode ", index))
}
sig_soft_out <- tensor_var_est(X, sig_method = "soft")
sig_soft_out <- tensor_var_est(X, sig_method = "naive", r = r)
sig_soft_out
sig_soft_out
print(sig_soft_out)
sig_soft_out <- tensor_var_est(X, sig_method = "mp")
print(sig_soft_out)
?sig_soft
?sig_mp
print(sig_mp_out$sig2_est)
sig_mp_out <- tensor_var_est(X, sig_method = "mp")
print(sig_mp_out$sig2_est)
print(sig_soft_out$sig2_est)
sig_soft_out <- tensor_var_est(X, sig_method = "soft")
print(sig_soft_out$sig2_est)
tau2_est <- sig_soft_out$sig2_est
sure_rank_out <- sure_rank(X, tau2 = tau2_est)
sure_rank_out$min_rank ## Estimated multilinear rank. Should be close to (5, 5, 5).
sure_rank_out$min_sure ## Corresponding minimum SURE value.
par(cex.lab = 0.7, cex.main = 0.7, cex.axis = 0.7, mgp = c(1.2, 0.4, 0),
mar = c(2.2, 2, 1.8, 0.5), pch = ".")
marg_1 <- sure_rank_out$all_ranks[,2] == sure_rank_out$min_rank[2] &
sure_rank_out$all_ranks[,3] == sure_rank_out$min_rank[3]
plot(sure_rank_out$all_ranks[,1], sure_rank_out$sure,
xlab = "Mode 1 Rank", ylab = "SURE", main = "Mode 1 Rank vs SURE")
lines(sure_rank_out$all_ranks[marg_1,1], sure_rank_out$sure[marg_1],
lty = 2, col = 2, lwd = 2)
legend("topright", "Other Modes at Min Value", lty = 2, col = 2,
lwd = 2, cex = 0.7)
marg_2 <- sure_rank_out$all_ranks[,1] == sure_rank_out$min_rank[1] &
sure_rank_out$all_ranks[,3] == sure_rank_out$min_rank[3]
plot(sure_rank_out$all_ranks[,2], sure_rank_out$sure,
xlab = "Mode 2 Rank", ylab = "SURE", main = "Mode 2 Rank vs SURE")
lines(sure_rank_out$all_ranks[marg_2,2], sure_rank_out$sure[marg_2],
lty = 2, col = 2, lwd = 2)
legend("topright", "Other Modes at Min Value", lty = 2, col = 2,
lwd = 2, cex = 0.7)
marg_3 <- sure_rank_out$all_ranks[,1] == sure_rank_out$min_rank[1] &
sure_rank_out$all_ranks[,2] == sure_rank_out$min_rank[2]
plot(sure_rank_out$all_ranks[,3], sure_rank_out$sure,
xlab = "Mode 3 Rank", ylab = "SURE", main = "Mode 3 Rank vs SURE")
lines(sure_rank_out$all_ranks[marg_3,3], sure_rank_out$sure[marg_3],
lty = 2, col = 2, lwd = 2)
legend("topright", "Other Modes at Min Value", lty = 2, col = 2,
lwd = 2, cex = 0.7)
c_obj <- get_c(X)
lambda_init <- rep(0,n)
c_init <- 1
soft_out <- soft_coord(c_obj,lambda_init = lambda_init,c_init = c_init,
use_sure = TRUE, print_iter = FALSE)
hosvd_soft <- hosvd_full(soft_out$est)
par(cex.lab = 0.7, cex.main = 0.7, cex.axis = 0.7, mgp = c(1.2, 0.4, 0),
mar = c(2.2, 2, 1.8, 0.5), pch = ".")
mode_index <- 1
plot(hosvd_soft$D[[mode_index]], type = "h", xlab = "Singular Value",
ylab = "Value", main = paste0("Mode ", mode_index, " Scree Plot"),
ylim = c(0, max(c(hosvd_soft$D[[mode_index]],
hosvd_x$D[[mode_index]],
hosvd_Theta$D[[mode_index]]))))
lines(1:p[mode_index] + 0.2, hosvd_x$D[[mode_index]], type = "h", lty = 2)
lines(1:p[mode_index] + 0.4, hosvd_Theta$D[[mode_index]], type = "h",
lty = 3)
legend("topright", c("Soft", "X", "Theta"), lty = 1:3, cex = 0.7)
mode_index <- 2
plot(hosvd_soft$D[[mode_index]], type = "h", xlab = "Singular Value",
ylab = "Value", main = paste0("Mode ", mode_index, " Scree Plot"),
ylim = c(0, max(c(hosvd_soft$D[[mode_index]],
hosvd_x$D[[mode_index]],
hosvd_Theta$D[[mode_index]]))))
lines(1:p[mode_index] + 0.2, hosvd_x$D[[mode_index]], type = "h", lty = 2)
lines(1:p[mode_index] + 0.4, hosvd_Theta$D[[mode_index]], type = "h",
lty = 3)
legend("topright", c("Soft", "X", "Theta"), lty = 1:3, cex = 0.7)
mode_index <- 3
plot(hosvd_soft$D[[mode_index]], type = "h", xlab = "Singular Value",
ylab = "Value", main = paste0("Mode ", mode_index, " Scree Plot"),
ylim = c(0, max(c(hosvd_soft$D[[mode_index]],
hosvd_x$D[[mode_index]],
hosvd_Theta$D[[mode_index]]))))
lines(1:p[mode_index] + 0.2, hosvd_x$D[[mode_index]], type = "h", lty = 2)
lines(1:p[mode_index] + 0.4, hosvd_Theta$D[[mode_index]], type = "h",
lty = 3)
legend("topright", c("Soft", "X", "Theta"), lty = 1:3, cex = 0.7)
svd_mode1 <- svd(tensr::mat(X, 1))
mat_optim <- optim(1, fn = sure_matrix, d = svd_mode1$d,
p_dim = c(p[1], prod(p[-1])), tau2 = 1, method = "Brent",
lower = 0, upper = svd_mode1$d[1])
mat_est <- array(svd_mode1$u %*%
diag(hose:::pos_part(svd_mode1$d - mat_optim$par)) %*%
t(svd_mode1$v), dim = p)
final_stein <- stein(X,tau2) ## Stein's estimator.
final_em <- min_ef(X,tau2) ## Min Efron-Morris estimator.
cat(
"                   Losses:", "\n",
"         Truncated HOSVD:", round(tensr::fnorm(sure_rank_out$est - Theta)), "\n",
"Tensor Soft Thresholding:", round(tensr::fnorm(soft_out$est - Theta)), "\n",
"Matrix Soft Thresholding:", round(tensr::fnorm(mat_est - Theta)), "\n",
"            Efron-Morris:", round(tensr::fnorm(final_em$ef_est - Theta)), "\n",
"                   Stein:", round(tensr::fnorm(final_stein$est - Theta)), "\n",
"                       X:", round(tensr::fnorm(X - Theta)), "\n\n")
c_obj <- get_c(X)
lambda_init <- rep(0, n)
c_init <- 1
soft_out <- soft_coord(c_obj, lambda_init = lambda_init, c_init = c_init,
use_sure = TRUE, print_iter = FALSE, tau2 = tau2_est)
c_obj <- get_c(X)
lambda_init <- rep(0, n)
c_init <- 1
soft_out <- soft_coord(c_obj, lambda_init = lambda_init, c_init = c_init,
use_sure = TRUE, print_iter = FALSE, tau2 = tau2_est, itermax = 20)
hosvd_soft <- hosvd_full(soft_out$est)
par(cex.lab = 0.7, cex.main = 0.7, cex.axis = 0.7, mgp = c(1.2, 0.4, 0),
mar = c(2.2, 2, 1.8, 0.5), pch = ".")
plot(hosvd_soft$D[[mode_index]], type = "h", xlab = "Singular Value",
ylab = "Value", main = paste0("Mode ", mode_index, " Scree Plot"),
ylim = c(0, max(c(hosvd_soft$D[[mode_index]],
hosvd_x$D[[mode_index]],
hosvd_Theta$D[[mode_index]]))))
lines(1:p[mode_index] + 0.2, hosvd_x$D[[mode_index]], type = "h", lty = 2)
lines(1:p[mode_index] + 0.4, hosvd_Theta$D[[mode_index]], type = "h",
lty = 3)
legend("topright", c("Soft", "X", "Theta"), lty = 1:3, cex = 0.7)
svd_mode1 <- svd(tensr::mat(X, 1))
mat_optim <- optim(1, fn = sure_matrix, d = svd_mode1$d,
p_dim = c(p[1], prod(p[-1])), tau2 = tau2_est, method = "Brent",
lower = 0, upper = svd_mode1$d[1])
mat_est <- array(svd_mode1$u %*%
diag(hose:::pos_part(svd_mode1$d - mat_optim$par)) %*%
t(svd_mode1$v), dim = p)
final_stein <- stein(X, tau2_est) ## Stein's estimator.
final_em <- min_ef(X, tau2_est) ## Min Efron-Morris estimator.
cat(
"                   Losses:", "\n",
"         Truncated HOSVD:", round(tensr::fnorm(sure_rank_out$est - Theta)), "\n",
"Tensor Soft Thresholding:", round(tensr::fnorm(soft_out$est - Theta)), "\n",
"Matrix Soft Thresholding:", round(tensr::fnorm(mat_est - Theta)), "\n",
"            Efron-Morris:", round(tensr::fnorm(final_em$ef_est - Theta)), "\n",
"                   Stein:", round(tensr::fnorm(final_stein$est - Theta)), "\n",
"                       X:", round(tensr::fnorm(X - Theta)), "\n\n")
devtools::build_vignettes()
devtools::build_vignettes()
sure_rank_out
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::install()
devtools::build_vignettes()
