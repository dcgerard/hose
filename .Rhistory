devtools::use_package("tensr")
formatR::tidy_app()
formatR::tidy_dir("R")
formatR::tidy_dir("R")
formatR::tidy_dir("R")
lintr::lint_package()
lintr::lint_package()
devtools::document()
devtools::document()
lintr::lint_package()
lintr::lint_package()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::load_all(".")
lintr::lint_package()
lintr::lint_package()
lintr::lint_package()
?lintr::lint_package
lintr::lint_package(linters = list(line_length_linter = 120))
lintr::lint_package(linters = list(line_length_linter(120)))
lintr::lint_package(linters = line_length_linter(120))
?line_length_linter
line_length_linter(120)
lintr::line_length_linter(120)
lintr::lint_package(linters = list(lintr::line_length_linter(120)))
lintr::lint_package(linters = lintr::line_length_linter(120))
devtools::document()
lintr::lint_package()
devtools::document()
lintr::lint_package()
devtools::install()
library(hose)
?soft_coord
p <- c(10,10,10)
X <- tensr:::rsan(p)
X
c_obj <- get_c(X)
c_obj
soft_out <- soft_coord(c_obj = c_obj)
soft_out <- soft_coord(c_obj = c_obj, lambda_init = c(1,1,1))
soft_out <- soft_coord(c_obj = c_obj, lambda_init = c(1,1,1), c_init = 0)
soft_out <- soft_coord(c_obj = c_obj, lambda_init = c(1,1,1), c_init = 1)
soft_out <- soft_coord(c_obj = c_obj, lambda_init = c(1,1,1), c_init = 1, itermax = 10)
soft_out <- soft_coord(c_obj = c_obj, lambda_init = c(1,1,1), c_init = 1, itermax = 100)
soft_out <- soft_coord(c_obj = c_obj, lambda_init = c(1,1,1), c_init = 1, itermax = 1000)
p <- c(10,10,100)
p <- c(10,20,100)
X <- tensr:::rsan(p)
c_obj <- get_c(X)
soft_out <- soft_coord(c_obj = c_obj, lambda_init = c(1,1,1), c_init = 1, itermax = 1000)
soft_out <- soft_coord(c_obj = c_obj, lambda_init = c(1,1,1), c_init = 10, itermax = 1000)
soft_out <- soft_coord(c_obj = c_obj, lambda_init = c(10,10,10), c_init = 10, itermax = 1000)
p <- c(10,20,10)
X <- tensr:::rsan(p)
c_obj <- get_c(X)
soft_out <- soft_coord(c_obj = c_obj, lambda_init = c(10,10,10), c_init = 10, itermax = 1000)
X <- tensr:::rsan(p) * 10
soft_out <- soft_coord(c_obj = c_obj, lambda_init = c(10,10,10), c_init = 10, itermax = 1000)
soft_out <- soft_coord(c_obj = c_obj, lambda_init = c(1,1,1), c_init = 10, itermax = 1000)
soft_out <- soft_coord(c_obj = c_obj, lambda_init = c(1,1,1), c_init = 1, itermax = 1000)
soft_out <- soft_coord(c_obj = c_obj, lambda_init = c(-1,-1,-1), c_init = 1, itermax = 1000)
soft_out <- soft_coord(c_obj = c_obj, lambda_init = c(-10,-10,-10), c_init = 1, itermax = 1000)
X <- tensr:::rsan(p) * 10
c_obj <- get_c(X)
soft_out <- soft_coord(c_obj = c_obj, lambda_init = c(-10,-10,-10), c_init = 1, itermax = 1000)
soft_out <- soft_coord(c_obj = c_obj, lambda_init = c(-10,-10,-10), c_init = 1, itermax = 1000, use_sure = FALSE)
soft_out <- soft_coord(c_obj = c_obj, lambda_init = c(-10,-10,-10), c_init = 1, itermax = 1000, use_sure = TRUE)
soft_out <- soft_coord(c_obj = c_obj, lambda_init = c(-10,-10,-10), c_init = 1, itermax = 1000, use_sure = TRUE)
soft_out <- soft_coord(c_obj = c_obj, lambda_init = c(-10,-10,-10), c_init = 1, itermax = 1000, use_sure = TRUE)
p <- c(100,200,100)
X <- tensr:::rsan(p) * 10
c_obj <- get_c(X)
soft_out <- soft_coord(c_obj = c_obj, lambda_init = c(1,1,1), c_init = 1, itermax = 1000, use_sure = TRUE)
soft_out <- soft_coord(c_obj = c_obj, lambda_init = c(1,1,1), c_init = 1, itermax = 1000, use_sure = FALSE)
soft_out <- soft_coord(c_obj = c_obj, lambda_init = c(1,1,1), c_init = 10, itermax = 1000, use_sure = TRUE)
devtools::load_all()
library(help = 'devtools')
devtools::build_vignettes()
devtools::use_vignette()
devtools::use_vignette('sure_example')
library(hose)
p <- c(10, 10, 10)
r <- c(5, 5, 5)
n <- length(p)
fnorm_mean <- sqrt(prod(p)) * sqrt(tau2) ## so on same order as error
p <- c(10, 10, 10)
r <- c(5, 5, 5)
n <- length(p)
tau2 <- 1
fnorm_mean <- sqrt(prod(p)) * sqrt(tau2) ## so on same order as error
U_temp <- hosvd(array(rnorm(prod(p)), dim = p))$U
library(tensr)
U_temp <- tensr::hosvd(array(rnorm(prod(p)), dim = p))$U
U2.temp <- list()
S_temp <- tensr::holq(array(rnorm(prod(p)), dim = r))$Z
for(index in 1:n)
{
U2_temp[[index]] <- U_temp[[index]][ , 1:r[index]]
}
U_temp <- tensr::hosvd(array(rnorm(prod(p)), dim = p))$U
U2_temp <- list()
S_temp <- tensr::holq(array(rnorm(prod(p)), dim = r))$Z
for(index in 1:n)
{
U2_temp[[index]] <- U_temp[[index]][ , 1:r[index]]
}
Theta <- atrans(S_temp, U2_temp)
Theta <- Theta/ fnorm(Theta) * fnorm_mean
hosvd_Theta <- hosvd_full(Theta)
X <- Theta + array(rnorm(n = prod(p),sd = sqrt(tau2)),dim = p)
devtools::install()
?tensr::holq
devtools::document()
devtools::inst()
devtools::install()
devtools::install()
library(hose)
?par
library(hose)
set.seed(247)
p <- c(10, 10, 10)
r <- c(5, 5, 5)
n <- length(p)
tau2 <- 1
fnorm_mean <- sqrt(prod(p)) * sqrt(tau2) ## so on same order as error
U_temp <- tensr::hosvd(array(stats::rnorm(prod(p)), dim = p))$U
U2_temp <- list()
S_temp <- tensr::holq(array(stats::rnorm(prod(p)), dim = r), print_diff = FALSE)$Z
for(index in 1:n)
{
U2_temp[[index]] <- U_temp[[index]][ , 1:r[index]]
}
## Our mean tensor.
Theta <- tensr::atrans(S_temp, U2_temp)
Theta <- Theta / tensr::fnorm(Theta) * fnorm_mean
hosvd_Theta <- hose::hosvd_full(Theta)
## Our data tensor
X <- Theta + array(stats::rnorm(n = prod(p), sd = sqrt(tau2)), dim = p)
sure_rank_out$min_rank ## Estimated multilinear rank. Should be close to (5, 5, 5).
sure_rank_out$min_sure ## Corresponding minimum SURE value.
sure_rank_out <- sure_rank(X, tau2 = tau2)
sure_rank_out$min_rank ## Estimated multilinear rank. Should be close to (5, 5, 5).
sure_rank_out$min_sure ## Corresponding minimum SURE value.
par(cex.lab = 0.7, cex.main = 0.7, cex.axis = 0.7, mgp = c(1.2, 0.4, 0),
mar = c(2.2, 2, 1.8, 0.5), pch = ".")
marg_1 <- sure_rank_out$all_ranks[,2] == sure_rank_out$min_rank[2] &
sure_rank_out$all_ranks[,3] == sure_rank_out$min_rank[3]
plot(sure_rank_out$all_ranks[,1], sure_rank_out$sure,
xlab = "Mode 1 Rank", ylab = "SURE", main = "Rank vs SURE")
lines(sure_rank_out$all_ranks[marg_1,1], sure_rank_out$sure[marg_1],
lty = 2, col = 2, lwd = 2)
legend("topright", "Other Modes at Min Value", lty = 2, col = 2,
lwd = 2, cex = 0.7)
marg_2 <- sure_rank_out$all_ranks[,1] == sure_rank_out$min_rank[1] &
sure_rank_out$all_ranks[,3] == sure_rank_out$min_rank[3]
plot(sure_rank_out$all_ranks[,2], sure_rank_out$sure,
xlab = "Mode 2 Rank", ylab = "SURE", main = "Rank vs SURE")
lines(sure_rank_out$all_ranks[marg_2,2], sure_rank_out$sure[marg_2],
lty = 2, col = 2, lwd = 2)
legend("topright", "Other Modes at Min Value", lty = 2, col = 2,
lwd = 2, cex = 0.7)
marg_3 <- sure_rank_out$all_ranks[,1] == sure_rank_out$min_rank[1] &
sure_rank_out$all_ranks[,2] == sure_rank_out$min_rank[2]
plot(sure_rank_out$all_ranks[,3], sure_rank_out$sure,
xlab = "Mode 3 Rank", ylab = "SURE", main = "Rank vs SURE")
lines(sure_rank_out$all_ranks[marg_3,3], sure_rank_out$sure[marg_3],
lty = 2, col = 2, lwd = 2)
legend("topright", "Other Modes at Min Value", lty = 2, col = 2,
lwd = 2, cex = 0.7)
lambda_init <- rep(0,n)
c_init <- 1
soft_out <- soft_coord(c_obj,lambda_init = lambda_init,c_init = c_init,use_sure = FALSE)
c_obj <- get_c(X)
lambda_init <- rep(0,n)
c_init <- 1
soft_out <- soft_coord(c_obj,lambda_init = lambda_init,c_init = c_init,use_sure = FALSE)
soft_out <- soft_coord(c_obj,lambda_init = lambda_init,c_init = c_init)
## get mode-specific shrinkage functions
func_lasso <- list()
dfunc_lasso <- list()
func_lasso[[1]] <- f_lasso_mult
dfunc_lasso[[1]] <- df_lasso_mult
for(mode_index in 2:n)
{
func_lasso[[mode_index]] <- f_lasso
dfunc_lasso[[mode_index]] <- df_lasso
}
## get mode-specific tuning parameters
lambda_list <- list()
lambda_list[[1]] <- c(soft_out$lambda[1],soft_out$c)
for(mode_index in 2:n)
{
lambda_list[[mode_index]] <- soft_out$lambda[mode_index]
}
final_soft <- sure_given_c(obj = c_obj,func = func_lasso,dfunc = dfunc_lasso,lambda = lambda_list, tau2 = tau2)
## scree plots of resulting estimator, X, and Theta
hosvd_soft <- hosvd_full(final_soft$mean_est)
for(mode_index in 1:n)
{
par(ask = TRUE)
plot(hosvd_soft$D[[mode_index]],type = "h",xlab = "Singular Value",ylab = "Value",ylim = c(0,max(c(hosvd_soft$D[[mode_index]],hosvd_x$D[[mode_index]],hosvd_Theta$D[[mode_index]]))))
lines(1:p[mode_index] + 0_2,hosvd_x$D[[mode_index]],type = "h",lty = 2)
lines(1:p[mode_index] + 0_4,hosvd_Theta$D[[mode_index]],type = "h",lty = 3)
legend("topright",c("Soft","X","Theta"),lty = 1:3)
par(ask = FALSE)
hosvd_soft <- hosvd_full(final_soft$mean_est)
for(mode_index in 1:n)
{
par(ask = TRUE)
plot(hosvd_soft$D[[mode_index]],type = "h",xlab = "Singular Value",ylab = "Value",ylim = c(0,max(c(hosvd_soft$D[[mode_index]],hosvd_x$D[[mode_index]],hosvd_Theta$D[[mode_index]]))))
lines(1:p[mode_index] + 0.2,hosvd_x$D[[mode_index]],type = "h",lty = 2)
lines(1:p[mode_index] + 0.4,hosvd_Theta$D[[mode_index]],type = "h",lty = 3)
legend("topright",c("Soft","X","Theta"),lty = 1:3)
par(ask = FALSE)
}
hosvd_x <- hosvd_full(X)
hosvd_soft <- hosvd_full(final_soft$mean_est)
for(mode_index in 1:n)
{
par(ask = TRUE)
plot(hosvd_soft$D[[mode_index]],type = "h",xlab = "Singular Value",ylab = "Value",ylim = c(0,max(c(hosvd_soft$D[[mode_index]],hosvd_x$D[[mode_index]],hosvd_Theta$D[[mode_index]]))))
lines(1:p[mode_index] + 0.2,hosvd_x$D[[mode_index]],type = "h",lty = 2)
lines(1:p[mode_index] + 0.4,hosvd_Theta$D[[mode_index]],type = "h",lty = 3)
legend("topright",c("Soft","X","Theta"),lty = 1:3)
par(ask = FALSE)
}
library(hose)
set.seed(247)
p <- c(10, 10, 10)
r <- c(5, 5, 5)
n <- length(p)
tau2 <- 1
fnorm_mean <- sqrt(prod(p)) * sqrt(tau2) ## so on same order as error
U_temp <- tensr::hosvd(array(stats::rnorm(prod(p)), dim = p))$U
U2_temp <- list()
S_temp <- tensr::holq(array(stats::rnorm(prod(p)), dim = r), print_diff = FALSE)$Z
for(index in 1:n)
{
U2_temp[[index]] <- U_temp[[index]][ , 1:r[index]]
}
## Our mean tensor.
Theta <- tensr::atrans(S_temp, U2_temp)
Theta <- Theta / tensr::fnorm(Theta) * fnorm_mean
hosvd_Theta <- hose::hosvd_full(Theta)
## Our data tensor
X <- Theta + array(stats::rnorm(n = prod(p), sd = sqrt(tau2)), dim = p)
## scree plots of the modes. Doesn't look low rank.
hosvd_x <- hosvd_full(X)
par(cex.lab = 0.7, cex.main = 0.7, cex.axis = 0.7, mgp = c(1.2, 0.4, 0),
mar = c(2.2, 2, 1.8, 0.5))
for(index in 1:n)
{
plot(hosvd_x$D[[index]], type = "h", ylim = c(0, max(hosvd_x$D[[index]])),
xlab = "Singular Value", ylab = "Value",
main = paste0("Scree Plot for Mode ", index))
}
sure_rank_out <- sure_rank(X, tau2 = tau2)
sure_rank_out$min_rank ## Estimated multilinear rank. Should be close to (5, 5, 5).
sure_rank_out$min_sure ## Corresponding minimum SURE value.
par(cex.lab = 0.7, cex.main = 0.7, cex.axis = 0.7, mgp = c(1.2, 0.4, 0),
mar = c(2.2, 2, 1.8, 0.5), pch = ".")
marg_1 <- sure_rank_out$all_ranks[,2] == sure_rank_out$min_rank[2] &
sure_rank_out$all_ranks[,3] == sure_rank_out$min_rank[3]
plot(sure_rank_out$all_ranks[,1], sure_rank_out$sure,
xlab = "Mode 1 Rank", ylab = "SURE", main = "Rank vs SURE")
lines(sure_rank_out$all_ranks[marg_1,1], sure_rank_out$sure[marg_1],
lty = 2, col = 2, lwd = 2)
legend("topright", "Other Modes at Min Value", lty = 2, col = 2,
lwd = 2, cex = 0.7)
marg_2 <- sure_rank_out$all_ranks[,1] == sure_rank_out$min_rank[1] &
sure_rank_out$all_ranks[,3] == sure_rank_out$min_rank[3]
plot(sure_rank_out$all_ranks[,2], sure_rank_out$sure,
xlab = "Mode 2 Rank", ylab = "SURE", main = "Rank vs SURE")
lines(sure_rank_out$all_ranks[marg_2,2], sure_rank_out$sure[marg_2],
lty = 2, col = 2, lwd = 2)
legend("topright", "Other Modes at Min Value", lty = 2, col = 2,
lwd = 2, cex = 0.7)
marg_3 <- sure_rank_out$all_ranks[,1] == sure_rank_out$min_rank[1] &
sure_rank_out$all_ranks[,2] == sure_rank_out$min_rank[2]
plot(sure_rank_out$all_ranks[,3], sure_rank_out$sure,
xlab = "Mode 3 Rank", ylab = "SURE", main = "Rank vs SURE")
lines(sure_rank_out$all_ranks[marg_3,3], sure_rank_out$sure[marg_3],
lty = 2, col = 2, lwd = 2)
legend("topright", "Other Modes at Min Value", lty = 2, col = 2,
lwd = 2, cex = 0.7)
c_obj <- get_c(X)
lambda_init <- rep(0,n)
c_init <- 1
soft_out <- soft_coord(c_obj,lambda_init = lambda_init,c_init = c_init)
soft_out <- soft_coord(c_obj,lambda_init = lambda_init,c_init = c_init)
## get mode-specific shrinkage functions
soft_out <- soft_coord(c_obj,lambda_init = lambda_init,c_init = c_init)
soft_out <- soft_coord(c_obj,lambda_init = lambda_init,c_init = c_init)
soft_out <- soft_coord(c_obj,lambda_init = lambda_init,c_init = c_init, use_sure = FALSE)
soft_out <- soft_coord(c_obj,lambda_init = lambda_init,c_init = c_init, use_sure = TRUE)
func_lasso <- list()
dfunc_lasso <- list()
func_lasso[[1]] <- f_lasso_mult
dfunc_lasso[[1]] <- df_lasso_mult
for(mode_index in 2:n)
{
func_lasso[[mode_index]] <- f_lasso
dfunc_lasso[[mode_index]] <- df_lasso
}
## get mode-specific tuning parameters
lambda_list <- list()
lambda_list[[1]] <- c(soft_out$lambda[1],soft_out$c)
for(mode_index in 2:n)
{
lambda_list[[mode_index]] <- soft_out$lambda[mode_index]
}
final_soft <- sure_given_c(obj = c_obj,func = func_lasso,dfunc = dfunc_lasso,lambda = lambda_list, tau2 = tau2)
## scree plots of resulting estimator, X, and Theta
hosvd_soft <- hosvd_full(final_soft$mean_est)
for(mode_index in 1:n)
{
par(ask = TRUE)
plot(hosvd_soft$D[[mode_index]],type = "h",xlab = "Singular Value",ylab = "Value",ylim = c(0,max(c(hosvd_soft$D[[mode_index]],hosvd_x$D[[mode_index]],hosvd_Theta$D[[mode_index]]))))
lines(1:p[mode_index] + 0.2,hosvd_x$D[[mode_index]],type = "h",lty = 2)
lines(1:p[mode_index] + 0.4,hosvd_Theta$D[[mode_index]],type = "h",lty = 3)
legend("topright",c("Soft","X","Theta"),lty = 1:3)
par(ask = FALSE)
}
?sure_given_c
devtools::document()
devtools::install()
?sure_given_c
devtools::install()
pos_part
library(hose)
pos_part
devtools::document()
devtools::document()
devtools::document()
devtools::load_all(".")
?get_c
devtools::build_vignettes()
devtools::document()
devtools::load_all(".")
?sure_S
devtools::document()
devtools::load_all(".")
?diverge_given_c
devtools::document()
devtools::install()
?block_sure_non
?block_sure
devtools::document()
devtools::install()
?soft_coord
library(hose)
?soft_coord
devtools::document()
devtools::install()
?soft_coord
library(hose)
?soft_coord
devtools::document()
devtools::install()
?get_c
library(hose)
?get)c
?get_c
library(hose)
?sure
devtools::document()
devtools::build_vignettes()
devtools::install()
devtools::document()
devtools::document()
install.packages("devtools")
devtools::document()
devtools::document()
devtools::install()
install.packages("devtools")
install.packages("devtools")
devtools::document()
devtools::document()
devtools::document()
devtools::install()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
?hosvd_full
devtools::document()
